import sqlite3
import random
import logging
import os
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DB_PATH = os.path.join(BASE_DIR, "database.db")
LOG_PATH = os.path.join(BASE_DIR, "logs", "bot.log")
QUESTIONS_PATH = os.path.join(BASE_DIR, "quiz_data.json")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
os.makedirs(os.path.dirname(LOG_PATH), exist_ok=True)
logging.basicConfig(
    filename=LOG_PATH,
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = "7840043878:AAGdk0KsQGubiOxSRMh_UphOOUrqMiDbutU"

# –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏
roulette_multipliers = [0, 0.1, 0.25, 0.5, 0.75, 0.9, 1, 1.1, 1.25, 1.5, 1.75, 2, 3, 10]

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ JSON
def load_questions():
    try:
        with open(QUESTIONS_PATH, "r", encoding="utf-8") as file:
            data = json.load(file)
            return data["directions"]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        return {}

quiz_data = load_questions()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
if not quiz_data:
    logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ñ–∞–π–ª–µ quiz_data.json")
    exit(1)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    return sqlite3.connect(DB_PATH)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        """
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            score INTEGER DEFAULT 0,
            level INTEGER DEFAULT 1
        )
        """
    )
    conn.commit()
    conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    username = update.message.from_user.username

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)",
        (user_id, username),
    )
    conn.commit()
    conn.close()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    keyboard = [
        [InlineKeyboardButton(f"üéØ {quiz_data[direction]['name']}", callback_data=f"dir_{direction}")]
        for direction in quiz_data.keys()
    ]
    
    await update.message.reply_text(
        "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
async def handle_direction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    direction = query.data.replace("dir_", "")
    
    if direction not in quiz_data:
        await query.message.reply_text("‚ùå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–º
    keyboard = [
        [InlineKeyboardButton(
            f"üìö {quiz_data[direction]['topics'][topic]['name']}",
            callback_data=f"topic_{direction}_{topic}"
        )]
        for topic in quiz_data[direction]["topics"].keys()
    ]
    
    await query.edit_message_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –≤ —Ä–∞–∑–¥–µ–ª–µ {quiz_data[direction]['name']}:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
async def handle_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    _, direction, topic = query.data.split("_")
    
    if direction not in quiz_data or topic not in quiz_data[direction]["topics"]:
        await query.message.reply_text("‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∫–≤–∏–∑ –∏–∑ —Ç–µ–º—ã
    quizzes = quiz_data[direction]["topics"][topic]["quizzes"]
    selected_quiz = random.choice(quizzes)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data["questions"] = selected_quiz["questions"]
    context.user_data["current_question"] = 0
    context.user_data["score"] = 0
    context.user_data["quiz_title"] = selected_quiz.get("title", "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞")
    
    await ask_question(update, context)

# –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å –∫–Ω–æ–ø–∫–∞–º–∏
async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query:
        await query.answer()
    
    questions = context.user_data["questions"]
    current_idx = context.user_data["current_question"]
    
    if current_idx >= len(questions):
        final_score = context.user_data["score"]
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"üèÜ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ '{context.user_data['quiz_title']}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–í–∞—à —Å—á–µ—Ç: {final_score}"
        )
        update_user_score(update.effective_user.id, final_score)
        return

    question_data = questions[current_idx]
    question = question_data["question"]
    answers = question_data["answers"]
    correct_idx = question_data["correct_answer"]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    context.user_data["correct_index"] = correct_idx
    context.user_data["current_explanation"] = question_data.get("explanation", "")
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = [
        [InlineKeyboardButton(answer, callback_data=f"ans_{i}")]
        for i, answer in enumerate(answers)
    ]
    
    if query:
        await query.edit_message_text(
            text=f"‚ùì –í–æ–ø—Ä–æ—Å {current_idx + 1}/{len(questions)}:\n\n{question}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"‚ùì –í–æ–ø—Ä–æ—Å {current_idx + 1}/{len(questions)}:\n\n{question}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_choice = int(query.data.split("_")[1])
    correct_idx = context.user_data["correct_index"]
    explanation = context.user_data["current_explanation"]
    
    if user_choice == correct_idx:
        context.user_data["score"] += 10
        response = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! +10 –±–∞–ª–ª–æ–≤"
    else:
        correct_answer = query.message.reply_markup.inline_keyboard[correct_idx][0].text
        response = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}"
    
    if explanation:
        response += f"\n\nüí° {explanation}"
    
    await query.edit_message_text(response)
    
    # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    context.user_data["current_question"] += 1
    await ask_question(update, context)

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞
def update_user_score(user_id, score):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET score = score + ? WHERE user_id = ?", (score, user_id))
    cursor.execute("SELECT score FROM users WHERE user_id = ?", (user_id,))
    new_score = cursor.fetchone()[0]
    level = new_score // 100
    cursor.execute("UPDATE users SET level = ? WHERE user_id = ?", (level, user_id))
    conn.commit()
    conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /roulette
async def roulette(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT score FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()

    if not result or result[0] < 10:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ (–º–∏–Ω–∏–º—É–º 10)")
        return

    context.user_data["current_score"] = result[0]

    keyboard = [
        [InlineKeyboardButton("–ü–æ—Å—Ç–∞–≤–∏—Ç—å –≤—Å—ë", callback_data="all")],
        [InlineKeyboardButton("–°–≤–æ—è —Å—Ç–∞–≤–∫–∞", callback_data="custom")],
    ]
    await update.message.reply_text(
        "üé∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Ä—É–ª–µ—Ç–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    choice = query.data

    if choice.startswith("ans_"):
        await handle_answer(update, context)
        return
    elif choice.startswith("dir_"):
        await handle_direction(update, context)
        return
    elif choice.startswith("topic_"):
        await handle_topic(update, context)
        return

    current_score = context.user_data.get("current_score", 0)

    if choice == "all":
        bet = current_score
    elif choice == "custom":
        await query.message.reply_text("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å—Ç–∞–≤–∫—É (–º–∏–Ω–∏–º—É–º 10):")
        context.user_data["awaiting_bet"] = True
        return

    if bet < 10:
        await query.message.reply_text("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ - 10 –±–∞–ª–ª–æ–≤")
        return

    multiplier = random.choice(roulette_multipliers)
    new_score = current_score - bet + int(bet * multiplier)

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET score = ? WHERE user_id = ?", (new_score, user_id))
    conn.commit()
    conn.close()

    await query.message.reply_text(
        f"üé∞ –†–µ–∑—É–ª—å—Ç–∞—Ç: {multiplier}x\n"
        f"üíµ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_score}"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏
async def handle_bet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("awaiting_bet", False):
        return

    try:
        bet = int(update.message.text)
    except ValueError:
        await update.message.reply_text("üî¢ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return

    current_score = context.user_data.get("current_score", 0)
    if bet < 10 or bet > current_score:
        await update.message.reply_text(f"‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 10 –¥–æ {current_score}")
        return

    context.user_data["awaiting_bet"] = False
    multiplier = random.choice(roulette_multipliers)
    new_score = current_score - bet + int(bet * multiplier)

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET score = ? WHERE user_id = ?", (new_score, update.message.from_user.id))
    conn.commit()
    conn.close()

    await update.message.reply_text(
        f"üé∞ –†–µ–∑—É–ª—å—Ç–∞—Ç: {multiplier}x\n"
        f"üíµ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_score}"
    )

# –ö–æ–º–∞–Ω–¥–∞ /score
async def score(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT score, level FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()

    if result:
        await update.message.reply_text(f"üìä –í–∞—à —Å—á–µ—Ç: {result[0]}\nüìà –£—Ä–æ–≤–µ–Ω—å: {result[1]}")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ /start")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    init_db()
    app = ApplicationBuilder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("roulette", roulette))
    app.add_handler(CommandHandler("score", score))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    app.add_handler(CallbackQueryHandler(button_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è —Å—Ç–∞–≤–æ–∫)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_bet))
    
    app.run_polling()

if __name__ == "__main__":
    main()
